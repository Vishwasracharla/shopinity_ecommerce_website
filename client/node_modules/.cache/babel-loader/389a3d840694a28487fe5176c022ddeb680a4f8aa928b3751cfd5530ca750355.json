{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vishwas\\\\Downloads\\\\myntra-clone\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"./AuthContext\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    userInfo\n  } = useContext(AuthContext);\n  const [cartItems, setCartItems] = useState(() => {\n    const savedCart = localStorage.getItem(\"cartItems\");\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n  const [shippingAddress, setShippingAddress] = useState(localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {});\n  const [paymentMethod, setPaymentMethod] = useState(localStorage.getItem(\"paymentMethod\") ? JSON.parse(localStorage.getItem(\"paymentMethod\")) : \"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Update localStorage when cart changes\n  useEffect(() => {\n    localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Update localStorage when shipping address changes\n  useEffect(() => {\n    localStorage.setItem(\"shippingAddress\", JSON.stringify(shippingAddress));\n  }, [shippingAddress]);\n\n  // Update localStorage when payment method changes\n  useEffect(() => {\n    localStorage.setItem(\"paymentMethod\", JSON.stringify(paymentMethod));\n  }, [paymentMethod]);\n\n  // Fetch cart from server if user is logged in\n  useEffect(() => {\n    const fetchCart = async () => {\n      if (userInfo) {\n        try {\n          setLoading(true);\n          const config = {\n            headers: {\n              Authorization: `Bearer ${userInfo.token}`\n            }\n          };\n          const {\n            data\n          } = await axios.get(\"/api/cart\", config);\n          if (data.products && data.products.length > 0) {\n            const serverCartItems = data.products.map(item => ({\n              product: item.productId._id,\n              name: item.productId.name,\n              image: item.productId.image,\n              price: item.productId.discountPrice || item.productId.price,\n              stock: item.productId.stock,\n              quantity: item.quantity\n            }));\n            setCartItems(serverCartItems);\n          }\n          setLoading(false);\n        } catch (error) {\n          setError(error.response && error.response.data.message ? error.response.data.message : error.message);\n          setLoading(false);\n        }\n      }\n    };\n    fetchCart();\n  }, [userInfo]);\n\n  // Add to cart\n  const addToCart = async (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.product === product._id);\n      if (existingItem) {\n        return prevItems.map(item => item.product === product._id ? {\n          ...item,\n          quantity: item.quantity + quantity\n        } : item);\n      }\n      return [...prevItems, {\n        ...product,\n        quantity\n      }];\n    });\n\n    // If user is logged in, update cart on server\n    if (userInfo) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${userInfo.token}`\n          }\n        };\n        await axios.post(\"/api/cart\", {\n          productId: product._id,\n          quantity\n        }, config);\n      } catch (error) {\n        toast.error(\"Error updating cart on server\");\n      }\n    }\n    toast.success(`Added ${product.name} to cart`);\n  };\n\n  // Remove from cart\n  const removeFromCart = async productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.product !== productId));\n\n    // If user is logged in, update cart on server\n    if (userInfo) {\n      try {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${userInfo.token}`\n          }\n        };\n        await axios.delete(`/api/cart/${productId}`, config);\n      } catch (error) {\n        toast.error(\"Error removing item from cart on server\");\n      }\n    }\n  };\n\n  // Update cart quantity\n  const updateQuantity = async (productId, quantity) => {\n    setCartItems(prevItems => prevItems.map(item => item.product === productId ? {\n      ...item,\n      quantity\n    } : item));\n\n    // If user is logged in, update cart on server\n    if (userInfo) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${userInfo.token}`\n          }\n        };\n        await axios.put(`/api/cart/${productId}`, {\n          quantity\n        }, config);\n      } catch (error) {\n        toast.error(\"Error updating cart on server\");\n      }\n    }\n  };\n\n  // Save shipping address\n  const saveShippingAddress = data => {\n    setShippingAddress(data);\n  };\n\n  // Save payment method\n  const savePaymentMethod = data => {\n    setPaymentMethod(data);\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCartItems([]);\n    localStorage.removeItem(\"cartItems\");\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      shippingAddress,\n      paymentMethod,\n      loading,\n      error,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      saveShippingAddress,\n      savePaymentMethod,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"r0jDQemAdYtpgenQ0CT9S8Iv+PM=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","React","createContext","useState","useEffect","useContext","axios","AuthContext","toast","jsxDEV","_jsxDEV","CartContext","CartProvider","children","userInfo","cartItems","setCartItems","savedCart","localStorage","getItem","JSON","parse","shippingAddress","setShippingAddress","paymentMethod","setPaymentMethod","loading","setLoading","error","setError","setItem","stringify","fetchCart","config","headers","Authorization","token","data","get","products","length","serverCartItems","map","item","product","productId","_id","name","image","price","discountPrice","stock","quantity","response","message","addToCart","prevItems","existingItem","find","post","success","removeFromCart","filter","delete","updateQuantity","put","saveShippingAddress","savePaymentMethod","clearCart","removeItem","Provider","value","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/vishwas/Downloads/myntra-clone/client/src/context/CartContext.js"],"sourcesContent":["\"use client\"\n\nimport React, { createContext, useState, useEffect, useContext } from \"react\"\nimport axios from \"axios\"\nimport { AuthContext } from \"./AuthContext\"\nimport { toast } from \"react-toastify\"\n\nexport const CartContext = createContext()\n\nexport const CartProvider = ({ children }) => {\n  const { userInfo } = useContext(AuthContext)\n  const [cartItems, setCartItems] = useState(() => {\n    const savedCart = localStorage.getItem(\"cartItems\")\n    return savedCart ? JSON.parse(savedCart) : []\n  })\n  const [shippingAddress, setShippingAddress] = useState(\n    localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {},\n  )\n  const [paymentMethod, setPaymentMethod] = useState(\n    localStorage.getItem(\"paymentMethod\") ? JSON.parse(localStorage.getItem(\"paymentMethod\")) : \"\",\n  )\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  // Update localStorage when cart changes\n  useEffect(() => {\n    localStorage.setItem(\"cartItems\", JSON.stringify(cartItems))\n  }, [cartItems])\n\n  // Update localStorage when shipping address changes\n  useEffect(() => {\n    localStorage.setItem(\"shippingAddress\", JSON.stringify(shippingAddress))\n  }, [shippingAddress])\n\n  // Update localStorage when payment method changes\n  useEffect(() => {\n    localStorage.setItem(\"paymentMethod\", JSON.stringify(paymentMethod))\n  }, [paymentMethod])\n\n  // Fetch cart from server if user is logged in\n  useEffect(() => {\n    const fetchCart = async () => {\n      if (userInfo) {\n        try {\n          setLoading(true)\n          const config = {\n            headers: {\n              Authorization: `Bearer ${userInfo.token}`,\n            },\n          }\n\n          const { data } = await axios.get(\"/api/cart\", config)\n\n          if (data.products && data.products.length > 0) {\n            const serverCartItems = data.products.map((item) => ({\n              product: item.productId._id,\n              name: item.productId.name,\n              image: item.productId.image,\n              price: item.productId.discountPrice || item.productId.price,\n              stock: item.productId.stock,\n              quantity: item.quantity,\n            }))\n\n            setCartItems(serverCartItems)\n          }\n\n          setLoading(false)\n        } catch (error) {\n          setError(error.response && error.response.data.message ? error.response.data.message : error.message)\n          setLoading(false)\n        }\n      }\n    }\n\n    fetchCart()\n  }, [userInfo])\n\n  // Add to cart\n  const addToCart = async (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.product === product._id)\n      if (existingItem) {\n        return prevItems.map(item =>\n          item.product === product._id\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        )\n      }\n      return [...prevItems, { ...product, quantity }]\n    })\n\n    // If user is logged in, update cart on server\n    if (userInfo) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${userInfo.token}`,\n          },\n        }\n\n        await axios.post(\"/api/cart\", { productId: product._id, quantity }, config)\n      } catch (error) {\n        toast.error(\"Error updating cart on server\")\n      }\n    }\n\n    toast.success(`Added ${product.name} to cart`)\n  }\n\n  // Remove from cart\n  const removeFromCart = async (productId) => {\n    setCartItems(prevItems => prevItems.filter(item => item.product !== productId))\n\n    // If user is logged in, update cart on server\n    if (userInfo) {\n      try {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${userInfo.token}`,\n          },\n        }\n\n        await axios.delete(`/api/cart/${productId}`, config)\n      } catch (error) {\n        toast.error(\"Error removing item from cart on server\")\n      }\n    }\n  }\n\n  // Update cart quantity\n  const updateQuantity = async (productId, quantity) => {\n    setCartItems(prevItems =>\n      prevItems.map(item =>\n        item.product === productId ? { ...item, quantity } : item\n      )\n    )\n\n    // If user is logged in, update cart on server\n    if (userInfo) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${userInfo.token}`,\n          },\n        }\n\n        await axios.put(`/api/cart/${productId}`, { quantity }, config)\n      } catch (error) {\n        toast.error(\"Error updating cart on server\")\n      }\n    }\n  }\n\n  // Save shipping address\n  const saveShippingAddress = (data) => {\n    setShippingAddress(data)\n  }\n\n  // Save payment method\n  const savePaymentMethod = (data) => {\n    setPaymentMethod(data)\n  }\n\n  // Clear cart\n  const clearCart = () => {\n    setCartItems([])\n    localStorage.removeItem(\"cartItems\")\n  }\n\n  return (\n    <CartContext.Provider\n      value={{\n        cartItems,\n        shippingAddress,\n        paymentMethod,\n        loading,\n        error,\n        addToCart,\n        removeFromCart,\n        updateQuantity,\n        saveShippingAddress,\n        savePaymentMethod,\n        clearCart,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}